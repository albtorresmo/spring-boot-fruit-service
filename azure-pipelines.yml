# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
  #vmImage: 'vs2017-win2016'

jobs:
- job: Prepare

  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort'
  - task: oc-setup@2
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      #version: 'https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz'
      version: '4.5.9'

  - bash: |
      echo "This is job Prepare."
      echo "##vso[task.setvariable variable=DevProjectFoundName;isOutput=true]`oc get ns ${DEV_PROJECT_NAME} -o name`"
      echo "##vso[task.setvariable variable=TestProjectFoundName;isOutput=true]`oc get ns ${TEST_PROJECT_NAME} -o name`"   

      if [ -z "`oc get ns ${DEV_PROJECT_NAME} -o name`" ]
      then
            echo "${DEV_PROJECT_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=DevProjectExists;isOutput=true]false"
      else
            echo "${DEV_PROJECT_NAME} exists"
            echo "##vso[task.setvariable variable=DevProjectExists;isOutput=true]true"
      fi
      if [ -z "`oc get ns ${TEST_PROJECT_NAME} -o name`" ]
      then
            echo "${TEST_PROJECT_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=TestProjectExists;isOutput=true]false"
      else
            echo "${TEST_PROJECT_NAME} exists"
            echo "##vso[task.setvariable variable=TestProjectExists;isOutput=true]true"
      fi
    name: CheckProjects

  - bash: |
        oc new-project ${DEV_PROJECT_NAME}
    name: CreateDevProject
    continueOnError: true
    condition: eq(variables['CheckProjects.DevProjectExists'], false)
  
  - bash: |
        oc new-project ${TEST_PROJECT_NAME}
    name: CreateTestProject
    continueOnError: true
    condition: eq(variables['CheckProjects.TestProjectExists'], false)
    
  - script: echo $(CheckProjects.DevProjectFoundName)
    name: echoDevProjectFoundName
  - script: echo $(CheckProjects.TestProjectFoundName)
    name: echoTestProjectFoundName

- job: Run
  variables:
    DevProjectName: $[ dependencies.Prepare.outputs['Prepare.CheckProjects.DevProjectFoundName'] ]

  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort'
  - task: oc-setup@2
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      #version: 'https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz'
      version: '4.5.9'

  - script: echo $(DevProjectName)
    name: echoDevProjectName
  - bash: |
      echo "This is job Run. $(agent.builddirectory) $(Build.ArtifactStagingDirectory)"

      echo "Build: $(Build)"
      echo "agent: $(agent)"

      echo "$(Build.ArtifactStagingDirectory)"
      ls $(Build.ArtifactStagingDirectory)
      echo "$(agent.builddirectory)"
      ls $(agent.builddirectory)
      if [ -z "`oc get ns ${DEV_PROJECT_NAME} -o name`" ]
      then
            echo "${DEV_PROJECT_NAME} doesn't exists"
            echo "##vso[task.setvariable variable=DevProjectExists;isOutput=true]false"
      else
            echo "${DEV_PROJECT_NAME} exists"
            echo "##vso[task.setvariable variable=DevProjectExists;isOutput=true]true"
      fi
    name: CheckProjects

  - task: Maven@3
    name: MavenTest
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'test'
    enabled: false
  
  - task: Maven@3
    name: MavenPackage
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'package -DskipTests -Popenshift'
    enabled: true

  - bash: |
      if [ -z "`oc get bc ${BUILD_NAME} -o name`" ]
      then
            echo "bc ${BUILD_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=BuildConfigDoesntExists;isOutput=true]true"
      else
            echo "bc ${BUILD_NAME} exists"
            echo "##vso[task.setvariable variable=BuildConfigDoesntExists;isOutput=true]false"
      fi
    name: CheckBuildConfig

  - task: oc-cmd@2
    name: NewBuildConfig
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      version: '4.5.9'
      uselocalOc: true
      cmd: 'new-build --name=$(BUILD_NAME) --image-stream=$(BUILD_IMAGE_STREAM) --binary -n $(DEV_PROJECT_NAME)'
      ignoreFlag: true
    #condition: eq('${{ variables['CheckBuildConfig.BuildConfigDoesntExists'] }}', true)
    condition: eq(variables['CheckBuildConfig.BuildConfigDoesntExists'], true)

  - task: oc-cmd@2
    name: StartBuild
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      version: '4.5.9'
      uselocalOc: true
      cmd: 'start-build $(BUILD_NAME) --from-file=$(Build.Repository.LocalPath)/target/$(APP_NAME)-dev-$(POM_VERSION).jar --wait -n $(DEV_PROJECT_NAME)'

  - bash: |
      if [ -z "`oc get deployment ${APP_NAME} -o name`" ]
      then
            echo "deployment ${APP_NAME} doesn't exist"
            echo "##vso[task.setvariable variable=DeploymentDoesntExists;isOutput=true]true"
      else
            echo "deployment ${APP_NAME} exists"
            echo "##vso[task.setvariable variable=DeploymentDoesntExists;isOutput=true]false"
      fi
    name: CheckDeployment

  - task: oc-cmd@2
    name: NewDeployment
    inputs:
      connectionType: 'OpenShift Connection Service'
      openshiftService: 'OCP Cluster 1'
      version: '4.5.9'
      uselocalOc: true
      cmd: 'new-app --name=$(APP_NAME) -e DB_USERNAME=luke -e DB_PASSWORD=secret -e JAVA_OPTIONS=-Dspring.profiles.active=openshift -l app=${APP_NAME},version=${POM_VERSION},provider=jenkins -n $(DEV_PROJECT_NAME)'
      ignoreFlag: true
    condition: eq(variables['CheckBuildConfig.DeploymentDoesntExists'], true)

  - bash: |
      oc set probe deployment/${APP_NAME} --liveness --get-url=http://:8080/actuator/health --initial-delay-seconds=180 -n $(DEV_PROJECT_NAME)
      oc set probe deployment/${APP_NAME} --readiness --get-url=http://:8080/api/fruits --timeout-seconds=3 --initial-delay-seconds=10 -n $(DEV_PROJECT_NAME)
    name: AddDeploymentProbes

  - bash: |
      oc label deployment/${APP_NAME} app.kubernetes.io/part-of=${APP_NAME}-app -n $(DEV_PROJECT_NAME)
      oc label deployment/${APP_NAME} app.openshift.io/runtime=spring -n $(DEV_PROJECT_NAME)
      oc annotate deployment/${APP_NAME} app.openshift.io/connects-to=my-database -n $(DEV_PROJECT_NAME)
    name: AddDeploymentDecoration

                        
                        